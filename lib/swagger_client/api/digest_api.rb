=begin
#DPN API

#Digital Preservation Network

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class DigestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Show a specific digest record.
    # Returns the data for the specific digest record matching the bag's uuid and the digest algorithm.  These two values always uniquely identify a digest. 
    # @param uuid UUIDv4 of the target bag
    # @param algorithm Name of the algorithm used
    # @param [Hash] opts the optional parameters
    # @return [Digest]
    def bag_uuid_digest_algorithm_get(uuid, algorithm, opts = {})
      data, _status_code, _headers = bag_uuid_digest_algorithm_get_with_http_info(uuid, algorithm, opts)
      return data
    end

    # Show a specific digest record.
    # Returns the data for the specific digest record matching the bag&#39;s uuid and the digest algorithm.  These two values always uniquely identify a digest. 
    # @param uuid UUIDv4 of the target bag
    # @param algorithm Name of the algorithm used
    # @param [Hash] opts the optional parameters
    # @return [Array<(Digest, Fixnum, Hash)>] Digest data, response status code and response headers
    def bag_uuid_digest_algorithm_get_with_http_info(uuid, algorithm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DigestApi.bag_uuid_digest_algorithm_get ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DigestApi.bag_uuid_digest_algorithm_get" if uuid.nil?
      # verify the required parameter 'algorithm' is set
      fail ArgumentError, "Missing the required parameter 'algorithm' when calling DigestApi.bag_uuid_digest_algorithm_get" if algorithm.nil?
      # resource path
      local_var_path = "/bag/{uuid}/digest/algorithm".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s).sub('{' + 'algorithm' + '}', algorithm.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Digest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigestApi#bag_uuid_digest_algorithm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of digests for the specified bag
    # Return a list of message digests for the specified bag. 
    # @param uuid UUIDv4 of the target bag
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with created_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with created_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @return [DigestResultList]
    def bag_uuid_digest_get(uuid, page, page_size, opts = {})
      data, _status_code, _headers = bag_uuid_digest_get_with_http_info(uuid, page, page_size, opts)
      return data
    end

    # List of digests for the specified bag
    # Return a list of message digests for the specified bag. 
    # @param uuid UUIDv4 of the target bag
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with created_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with created_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @return [Array<(DigestResultList, Fixnum, Hash)>] DigestResultList data, response status code and response headers
    def bag_uuid_digest_get_with_http_info(uuid, page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DigestApi.bag_uuid_digest_get ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DigestApi.bag_uuid_digest_get" if uuid.nil?
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling DigestApi.bag_uuid_digest_get" if page.nil?
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling DigestApi.bag_uuid_digest_get" if page_size.nil?
      if opts[:'order_by'] && !['created_at'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of created_at'
      end
      # resource path
      local_var_path = "/bag/{uuid}/digest".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'page_size'] = page_size
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DigestResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigestApi#bag_uuid_digest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a digest for the specified bag
    # This endpoint allows the creation of a single digest through a post body.  The body is the same as the data structure for the Digest. If successful, the response will be identical to that of a GET request. 
    # @param uuid UUIDv4 of the target bag
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Digest]
    def bag_uuid_digest_post(uuid, body, opts = {})
      data, _status_code, _headers = bag_uuid_digest_post_with_http_info(uuid, body, opts)
      return data
    end

    # Create a digest for the specified bag
    # This endpoint allows the creation of a single digest through a post body.  The body is the same as the data structure for the Digest. If successful, the response will be identical to that of a GET request. 
    # @param uuid UUIDv4 of the target bag
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Digest, Fixnum, Hash)>] Digest data, response status code and response headers
    def bag_uuid_digest_post_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DigestApi.bag_uuid_digest_post ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DigestApi.bag_uuid_digest_post" if uuid.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling DigestApi.bag_uuid_digest_post" if body.nil?
      # resource path
      local_var_path = "/bag/{uuid}/digest".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Digest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigestApi#bag_uuid_digest_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of digests
    # This endpoint is meant to facilitate synchronizing of data.  It returns a list of digests. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with created_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with created_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @return [DigestResultList]
    def digest_get(page, page_size, opts = {})
      data, _status_code, _headers = digest_get_with_http_info(page, page_size, opts)
      return data
    end

    # List of digests
    # This endpoint is meant to facilitate synchronizing of data.  It returns a list of digests. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with created_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with created_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @return [Array<(DigestResultList, Fixnum, Hash)>] DigestResultList data, response status code and response headers
    def digest_get_with_http_info(page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DigestApi.digest_get ..."
      end
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling DigestApi.digest_get" if page.nil?
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling DigestApi.digest_get" if page_size.nil?
      if opts[:'order_by'] && !['created_at'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of created_at'
      end
      # resource path
      local_var_path = "/digest".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'page_size'] = page_size
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DigestResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigestApi#digest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

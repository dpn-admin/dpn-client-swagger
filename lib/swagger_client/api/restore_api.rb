=begin
#DPN API

#Digital Preservation Network

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class RestoreApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List of restore requests
    # Returns a list of restore transfer requests. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @option opts [String] :bag Filter by the associated bag&#39;s uuid 
    # @option opts [String] :to_node Filter by to_node namespace. 
    # @option opts [String] :from_node Filter by from_node namespace. 
    # @option opts [BOOLEAN] :accepted Filter by accepted 
    # @option opts [BOOLEAN] :finished Filter by finished 
    # @option opts [BOOLEAN] :cancelled Filter by cancelled 
    # @option opts [String] :cancel_reason Filter by cancel_reason.  Refer to the object definition for supported values. 
    # @return [RestoreRequestResultList]
    def restore_get(page, page_size, opts = {})
      data, _status_code, _headers = restore_get_with_http_info(page, page_size, opts)
      return data
    end

    # List of restore requests
    # Returns a list of restore transfer requests. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @option opts [String] :bag Filter by the associated bag&#39;s uuid 
    # @option opts [String] :to_node Filter by to_node namespace. 
    # @option opts [String] :from_node Filter by from_node namespace. 
    # @option opts [BOOLEAN] :accepted Filter by accepted 
    # @option opts [BOOLEAN] :finished Filter by finished 
    # @option opts [BOOLEAN] :cancelled Filter by cancelled 
    # @option opts [String] :cancel_reason Filter by cancel_reason.  Refer to the object definition for supported values. 
    # @return [Array<(RestoreRequestResultList, Fixnum, Hash)>] RestoreRequestResultList data, response status code and response headers
    def restore_get_with_http_info(page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RestoreApi.restore_get ..."
      end
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling RestoreApi.restore_get" if page.nil?
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling RestoreApi.restore_get" if page_size.nil?
      if opts[:'order_by'] && !['updated_at', 'created_at'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_at, created_at'
      end
      # resource path
      local_var_path = "/restore".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'page_size'] = page_size
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?
      query_params[:'bag'] = opts[:'bag'] if !opts[:'bag'].nil?
      query_params[:'to_node'] = opts[:'to_node'] if !opts[:'to_node'].nil?
      query_params[:'from_node'] = opts[:'from_node'] if !opts[:'from_node'].nil?
      query_params[:'accepted'] = opts[:'accepted'] if !opts[:'accepted'].nil?
      query_params[:'finished'] = opts[:'finished'] if !opts[:'finished'].nil?
      query_params[:'cancelled'] = opts[:'cancelled'] if !opts[:'cancelled'].nil?
      query_params[:'cancel_reason'] = opts[:'cancel_reason'] if !opts[:'cancel_reason'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RestoreRequestResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestoreApi#restore_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a restore request
    # This endpoint allows the creation of a single restore request through a post body.  The post body is the same as the data structure for the restore request.  If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RestoreRequest]
    def restore_post(body, opts = {})
      data, _status_code, _headers = restore_post_with_http_info(body, opts)
      return data
    end

    # Create a restore request
    # This endpoint allows the creation of a single restore request through a post body.  The post body is the same as the data structure for the restore request.  If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestoreRequest, Fixnum, Hash)>] RestoreRequest data, response status code and response headers
    def restore_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RestoreApi.restore_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RestoreApi.restore_post" if body.nil?
      # resource path
      local_var_path = "/restore".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RestoreRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestoreApi#restore_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the data for a single restore request.
    # Returns the data for a single restore transfer request record matching the restore_id. 
    # @param restore_id restore_id of the target record
    # @param [Hash] opts the optional parameters
    # @return [RestoreRequest]
    def restore_restore_id_get(restore_id, opts = {})
      data, _status_code, _headers = restore_restore_id_get_with_http_info(restore_id, opts)
      return data
    end

    # Returns the data for a single restore request.
    # Returns the data for a single restore transfer request record matching the restore_id. 
    # @param restore_id restore_id of the target record
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestoreRequest, Fixnum, Hash)>] RestoreRequest data, response status code and response headers
    def restore_restore_id_get_with_http_info(restore_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RestoreApi.restore_restore_id_get ..."
      end
      # verify the required parameter 'restore_id' is set
      fail ArgumentError, "Missing the required parameter 'restore_id' when calling RestoreApi.restore_restore_id_get" if restore_id.nil?
      # resource path
      local_var_path = "/restore/{restore_id}".sub('{format}','json').sub('{' + 'restore_id' + '}', restore_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RestoreRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestoreApi#restore_restore_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the restore request
    # Updates a single restore transfer request matching the restore_id.  The body of the put is the same as the data structure for the restore request.  If successful, the response will be identical to that of a GET request. 
    # @param restore_id restore_id of the target record
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RestoreRequest]
    def restore_restore_id_put(restore_id, body, opts = {})
      data, _status_code, _headers = restore_restore_id_put_with_http_info(restore_id, body, opts)
      return data
    end

    # Update the restore request
    # Updates a single restore transfer request matching the restore_id.  The body of the put is the same as the data structure for the restore request.  If successful, the response will be identical to that of a GET request. 
    # @param restore_id restore_id of the target record
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestoreRequest, Fixnum, Hash)>] RestoreRequest data, response status code and response headers
    def restore_restore_id_put_with_http_info(restore_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RestoreApi.restore_restore_id_put ..."
      end
      # verify the required parameter 'restore_id' is set
      fail ArgumentError, "Missing the required parameter 'restore_id' when calling RestoreApi.restore_restore_id_put" if restore_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RestoreApi.restore_restore_id_put" if body.nil?
      # resource path
      local_var_path = "/restore/{restore_id}".sub('{format}','json').sub('{' + 'restore_id' + '}', restore_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RestoreRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestoreApi#restore_restore_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

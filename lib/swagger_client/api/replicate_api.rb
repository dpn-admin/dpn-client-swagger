=begin
#DPN API

#Digital Preservation Network

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ReplicateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List of replication requests
    # Returns a list of replication transfer requests. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @option opts [String] :bag Filter by the associated bag&#39;s uuid 
    # @option opts [String] :to_node Filter by to_node namespace. 
    # @option opts [String] :from_node Filter by from_node namespace. 
    # @option opts [BOOLEAN] :store_requested Filter by store_requested 
    # @option opts [BOOLEAN] :stored Filter by stored 
    # @option opts [BOOLEAN] :cancelled Filter by cancelled 
    # @option opts [String] :cancel_reason Filter by cancel_reason.  Refer to the object definition for supported values. 
    # @return [ReplicationRequestResultList]
    def replicate_get(page, page_size, opts = {})
      data, _status_code, _headers = replicate_get_with_http_info(page, page_size, opts)
      return data
    end

    # List of replication requests
    # Returns a list of replication transfer requests. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @option opts [String] :bag Filter by the associated bag&#39;s uuid 
    # @option opts [String] :to_node Filter by to_node namespace. 
    # @option opts [String] :from_node Filter by from_node namespace. 
    # @option opts [BOOLEAN] :store_requested Filter by store_requested 
    # @option opts [BOOLEAN] :stored Filter by stored 
    # @option opts [BOOLEAN] :cancelled Filter by cancelled 
    # @option opts [String] :cancel_reason Filter by cancel_reason.  Refer to the object definition for supported values. 
    # @return [Array<(ReplicationRequestResultList, Fixnum, Hash)>] ReplicationRequestResultList data, response status code and response headers
    def replicate_get_with_http_info(page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReplicateApi.replicate_get ..."
      end
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling ReplicateApi.replicate_get" if page.nil?
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling ReplicateApi.replicate_get" if page_size.nil?
      if opts[:'order_by'] && !['updated_at', 'created_at'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_at, created_at'
      end
      # resource path
      local_var_path = "/replicate".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'page_size'] = page_size
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?
      query_params[:'bag'] = opts[:'bag'] if !opts[:'bag'].nil?
      query_params[:'to_node'] = opts[:'to_node'] if !opts[:'to_node'].nil?
      query_params[:'from_node'] = opts[:'from_node'] if !opts[:'from_node'].nil?
      query_params[:'store_requested'] = opts[:'store_requested'] if !opts[:'store_requested'].nil?
      query_params[:'stored'] = opts[:'stored'] if !opts[:'stored'].nil?
      query_params[:'cancelled'] = opts[:'cancelled'] if !opts[:'cancelled'].nil?
      query_params[:'cancel_reason'] = opts[:'cancel_reason'] if !opts[:'cancel_reason'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReplicationRequestResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReplicateApi#replicate_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a replication request
    # This endpoint allows the creation of a single replication request through a post body.  The post body is the same as the data structure for the replication request.  If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ReplicationRequest]
    def replicate_post(body, opts = {})
      data, _status_code, _headers = replicate_post_with_http_info(body, opts)
      return data
    end

    # Create a replication request
    # This endpoint allows the creation of a single replication request through a post body.  The post body is the same as the data structure for the replication request.  If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplicationRequest, Fixnum, Hash)>] ReplicationRequest data, response status code and response headers
    def replicate_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReplicateApi.replicate_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ReplicateApi.replicate_post" if body.nil?
      # resource path
      local_var_path = "/replicate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReplicationRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReplicateApi#replicate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the data for a single replication request.
    # Returns the data for a single replication transfer request record matching the replication_id. 
    # @param replication_id replication_id of the target record
    # @param [Hash] opts the optional parameters
    # @return [ReplicationRequest]
    def replicate_replication_id_get(replication_id, opts = {})
      data, _status_code, _headers = replicate_replication_id_get_with_http_info(replication_id, opts)
      return data
    end

    # Returns the data for a single replication request.
    # Returns the data for a single replication transfer request record matching the replication_id. 
    # @param replication_id replication_id of the target record
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplicationRequest, Fixnum, Hash)>] ReplicationRequest data, response status code and response headers
    def replicate_replication_id_get_with_http_info(replication_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReplicateApi.replicate_replication_id_get ..."
      end
      # verify the required parameter 'replication_id' is set
      fail ArgumentError, "Missing the required parameter 'replication_id' when calling ReplicateApi.replicate_replication_id_get" if replication_id.nil?
      # resource path
      local_var_path = "/replicate/{replication_id}".sub('{format}','json').sub('{' + 'replication_id' + '}', replication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReplicationRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReplicateApi#replicate_replication_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the replication request
    # Updates a single replication transfer request matching the replication_id.  The body of the put is the same as the data structure for the replication request.  If successful, the response will be identical to that of a GET request. 
    # @param replication_id replication_id of the target record
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ReplicationRequest]
    def replicate_replication_id_put(replication_id, body, opts = {})
      data, _status_code, _headers = replicate_replication_id_put_with_http_info(replication_id, body, opts)
      return data
    end

    # Update the replication request
    # Updates a single replication transfer request matching the replication_id.  The body of the put is the same as the data structure for the replication request.  If successful, the response will be identical to that of a GET request. 
    # @param replication_id replication_id of the target record
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplicationRequest, Fixnum, Hash)>] ReplicationRequest data, response status code and response headers
    def replicate_replication_id_put_with_http_info(replication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReplicateApi.replicate_replication_id_put ..."
      end
      # verify the required parameter 'replication_id' is set
      fail ArgumentError, "Missing the required parameter 'replication_id' when calling ReplicateApi.replicate_replication_id_put" if replication_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ReplicateApi.replicate_replication_id_put" if body.nil?
      # resource path
      local_var_path = "/replicate/{replication_id}".sub('{format}','json').sub('{' + 'replication_id' + '}', replication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReplicationRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReplicateApi#replicate_replication_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

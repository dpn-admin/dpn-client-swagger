=begin
#DPN API

#Digital Preservation Network

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class MemberApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List of members
    # Returns a list of members. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @return [MemberResultList]
    def member_get(page, page_size, opts = {})
      data, _status_code, _headers = member_get_with_http_info(page, page_size, opts)
      return data
    end

    # List of members
    # Returns a list of members. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @return [Array<(MemberResultList, Fixnum, Hash)>] MemberResultList data, response status code and response headers
    def member_get_with_http_info(page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MemberApi.member_get ..."
      end
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling MemberApi.member_get" if page.nil?
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling MemberApi.member_get" if page_size.nil?
      if opts[:'order_by'] && !['updated_at', 'created_at'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_at, created_at'
      end
      # resource path
      local_var_path = "/member".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'page_size'] = page_size
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MemberResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberApi#member_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the member's bags
    # Returns the member's bags.  Behavior should match that of ```/bags/?member=<member:member_id>```, including querystring options except for ```member```. 
    # @param member_id member_id of the member
    # @param [Hash] opts the optional parameters
    # @return [BagResultList]
    def member_member_id_bags_get(member_id, opts = {})
      data, _status_code, _headers = member_member_id_bags_get_with_http_info(member_id, opts)
      return data
    end

    # Returns the member&#39;s bags
    # Returns the member&#39;s bags.  Behavior should match that of &#x60;&#x60;&#x60;/bags/?member&#x3D;&lt;member:member_id&gt;&#x60;&#x60;&#x60;, including querystring options except for &#x60;&#x60;&#x60;member&#x60;&#x60;&#x60;. 
    # @param member_id member_id of the member
    # @param [Hash] opts the optional parameters
    # @return [Array<(BagResultList, Fixnum, Hash)>] BagResultList data, response status code and response headers
    def member_member_id_bags_get_with_http_info(member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MemberApi.member_member_id_bags_get ..."
      end
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling MemberApi.member_member_id_bags_get" if member_id.nil?
      # resource path
      local_var_path = "/member/{member_id}/bags".sub('{format}','json').sub('{' + 'member_id' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BagResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberApi#member_member_id_bags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the data for a single member record matching the member_id.
    # Returns the data for a single member record matching the member_id.
    # @param member_id member_id of the member
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def member_member_id_get(member_id, opts = {})
      data, _status_code, _headers = member_member_id_get_with_http_info(member_id, opts)
      return data
    end

    # Returns the data for a single member record matching the member_id.
    # Returns the data for a single member record matching the member_id.
    # @param member_id member_id of the member
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Fixnum, Hash)>] Member data, response status code and response headers
    def member_member_id_get_with_http_info(member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MemberApi.member_member_id_get ..."
      end
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling MemberApi.member_member_id_get" if member_id.nil?
      # resource path
      local_var_path = "/member/{member_id}".sub('{format}','json').sub('{' + 'member_id' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Member')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberApi#member_member_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the member
    # Updates a single member matching the member_id.  The body of the put is the same as the data structure for the member.  If successful, the response will be identical to that of a GET request. 
    # @param member_id member_id of the member
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def member_member_id_put(member_id, body, opts = {})
      data, _status_code, _headers = member_member_id_put_with_http_info(member_id, body, opts)
      return data
    end

    # Update the member
    # Updates a single member matching the member_id.  The body of the put is the same as the data structure for the member.  If successful, the response will be identical to that of a GET request. 
    # @param member_id member_id of the member
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Fixnum, Hash)>] Member data, response status code and response headers
    def member_member_id_put_with_http_info(member_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MemberApi.member_member_id_put ..."
      end
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling MemberApi.member_member_id_put" if member_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MemberApi.member_member_id_put" if body.nil?
      # resource path
      local_var_path = "/member/{member_id}".sub('{format}','json').sub('{' + 'member_id' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Member')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberApi#member_member_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a member
    # This endpoint allows the creation of a single member through a post body.  The body is the same as the data structure for the Member. If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def member_post(body, opts = {})
      data, _status_code, _headers = member_post_with_http_info(body, opts)
      return data
    end

    # Create a member
    # This endpoint allows the creation of a single member through a post body.  The body is the same as the data structure for the Member. If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Fixnum, Hash)>] Member data, response status code and response headers
    def member_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MemberApi.member_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MemberApi.member_post" if body.nil?
      # resource path
      local_var_path = "/member".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Member')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberApi#member_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

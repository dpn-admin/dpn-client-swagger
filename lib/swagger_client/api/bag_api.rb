=begin
#DPN API

#Digital Preservation Network

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class BagApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List of bags
    # Returns a list of Bag records. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [String] :bag_type Filter by bag type. Consult the Bag definitions for the supported values. 
    # @option opts [String] :admin_node Filter by admin_node namespace 
    # @option opts [String] :ingest_node Filter by ingest_node namespace 
    # @option opts [String] :member Filter by member_id
    # @option opts [String] :replicated_by The namespace of the replicating node on which  to filter.  Multiple filters can be used, separated by comma.  The result will include the union (OR)  of the filtered results. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @option opts [String] :first_version_uuid Filter by first_version_uuid. 
    # @return [BagResultList]
    def bag_get(page, page_size, opts = {})
      data, _status_code, _headers = bag_get_with_http_info(page, page_size, opts)
      return data
    end

    # List of bags
    # Returns a list of Bag records. 
    # @param page Page number to return, starting at 1.  For use  with page_size. 
    # @param page_size Max results per page. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :before Only include records with updated_at **earlier**  than this, inclusive. 
    # @option opts [DateTime] :after Only include records with updated_at **later**  than this, inclusive. 
    # @option opts [String] :bag_type Filter by bag type. Consult the Bag definitions for the supported values. 
    # @option opts [String] :admin_node Filter by admin_node namespace 
    # @option opts [String] :ingest_node Filter by ingest_node namespace 
    # @option opts [String] :member Filter by member_id
    # @option opts [String] :replicated_by The namespace of the replicating node on which  to filter.  Multiple filters can be used, separated by comma.  The result will include the union (OR)  of the filtered results. 
    # @option opts [Array<String>] :order_by Comma separated list of string fields by which to order the response. 
    # @option opts [String] :first_version_uuid Filter by first_version_uuid. 
    # @return [Array<(BagResultList, Fixnum, Hash)>] BagResultList data, response status code and response headers
    def bag_get_with_http_info(page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BagApi.bag_get ..."
      end
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling BagApi.bag_get" if page.nil?
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling BagApi.bag_get" if page_size.nil?
      if opts[:'order_by'] && !['updated_at', 'created_at'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_at, created_at'
      end
      # resource path
      local_var_path = "/bag".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'page_size'] = page_size
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'bag_type'] = opts[:'bag_type'] if !opts[:'bag_type'].nil?
      query_params[:'admin_node'] = opts[:'admin_node'] if !opts[:'admin_node'].nil?
      query_params[:'ingest_node'] = opts[:'ingest_node'] if !opts[:'ingest_node'].nil?
      query_params[:'member'] = opts[:'member'] if !opts[:'member'].nil?
      query_params[:'replicated_by'] = opts[:'replicated_by'] if !opts[:'replicated_by'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?
      query_params[:'first_version_uuid'] = opts[:'first_version_uuid'] if !opts[:'first_version_uuid'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BagResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BagApi#bag_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a bag
    # This endpoint allows the creation of a single bag through a post body. The post body is the same as the data structure for the bag.  If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Bag]
    def bag_post(body, opts = {})
      data, _status_code, _headers = bag_post_with_http_info(body, opts)
      return data
    end

    # Create a bag
    # This endpoint allows the creation of a single bag through a post body. The post body is the same as the data structure for the bag.  If successful, the response will be identical to that of a GET request. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bag, Fixnum, Hash)>] Bag data, response status code and response headers
    def bag_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BagApi.bag_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling BagApi.bag_post" if body.nil?
      # resource path
      local_var_path = "/bag".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Bag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BagApi#bag_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the data for a single bag record matching the uuid.
    # Returns the data for a single bag record matching the uuid.
    # @param uuid UUIDv4 of the target bag
    # @param [Hash] opts the optional parameters
    # @return [Bag]
    def bag_uuid_get(uuid, opts = {})
      data, _status_code, _headers = bag_uuid_get_with_http_info(uuid, opts)
      return data
    end

    # Returns the data for a single bag record matching the uuid.
    # Returns the data for a single bag record matching the uuid.
    # @param uuid UUIDv4 of the target bag
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bag, Fixnum, Hash)>] Bag data, response status code and response headers
    def bag_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BagApi.bag_uuid_get ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling BagApi.bag_uuid_get" if uuid.nil?
      # resource path
      local_var_path = "/bag/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Bag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BagApi#bag_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the bag
    # Updates a single bag matching the uuid.  The body of the put is the same as the data structure for the bag.  If successful, the response will be identical to that of a GET request. 
    # @param uuid UUIDv4 of the target bag
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Bag]
    def bag_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = bag_uuid_put_with_http_info(uuid, body, opts)
      return data
    end

    # Update the bag
    # Updates a single bag matching the uuid.  The body of the put is the same as the data structure for the bag.  If successful, the response will be identical to that of a GET request. 
    # @param uuid UUIDv4 of the target bag
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bag, Fixnum, Hash)>] Bag data, response status code and response headers
    def bag_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BagApi.bag_uuid_put ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling BagApi.bag_uuid_put" if uuid.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling BagApi.bag_uuid_put" if body.nil?
      # resource path
      local_var_path = "/bag/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Bag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BagApi#bag_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the member's bags
    # Returns the member's bags.  Behavior should match that of ```/bags/?member=<member:member_id>```, including querystring options except for ```member```. 
    # @param member_id member_id of the member
    # @param [Hash] opts the optional parameters
    # @return [BagResultList]
    def member_member_id_bags_get(member_id, opts = {})
      data, _status_code, _headers = member_member_id_bags_get_with_http_info(member_id, opts)
      return data
    end

    # Returns the member&#39;s bags
    # Returns the member&#39;s bags.  Behavior should match that of &#x60;&#x60;&#x60;/bags/?member&#x3D;&lt;member:member_id&gt;&#x60;&#x60;&#x60;, including querystring options except for &#x60;&#x60;&#x60;member&#x60;&#x60;&#x60;. 
    # @param member_id member_id of the member
    # @param [Hash] opts the optional parameters
    # @return [Array<(BagResultList, Fixnum, Hash)>] BagResultList data, response status code and response headers
    def member_member_id_bags_get_with_http_info(member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BagApi.member_member_id_bags_get ..."
      end
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling BagApi.member_member_id_bags_get" if member_id.nil?
      # resource path
      local_var_path = "/member/{member_id}/bags".sub('{format}','json').sub('{' + 'member_id' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BagResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BagApi#member_member_id_bags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
